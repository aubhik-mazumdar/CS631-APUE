WEEK 1 NOTES

LINUX DIRECTORY STRUCTURE

/
-> /bin - User Binaries
-> /sbin - System binaries
-> /etc - Configuration Files(hosts,man.conf,rc.d)
-> /dev - contains device files and the all important null file for piping uninteresting output
-> /proc - contains process information using their process ids and other system information like memory status
-> /var - variable files like logs,messages, the tmp directory, backups for etc,root,var and work etc.
-> /tmp - currently empty, it is used for storing temporary files
-> /usr - User programs.The bin and sbin directories here contain user-level programs like grep and man. After running the  
-> /home - Home directories
-> /boot - can't cd to boot. NETBSD uses /usr/mdec/boot
-> /lib - System libraries
-> /opt - optional add-on apps
-> /mnt - mount directory
-> /media - removable devices
-> /srv - service data


FUN FACT: tar stands for tape archive as it was used to deal with tape backups and recovery. It seems the name stuck.

TIP: $? returns the return status of the last run program or function

EXPERIMENT: running df shows this output-

Filesystem   512-blocks       Used      Avail %Cap Mounted on
/dev/wd0a      33030300    3145104   28233684  10% /
kernfs                2          2          0 100% /kern
ptyfs                 2          2          0 100% /dev/pts
procfs                8          8          0 100% /proc
tmpfs            524056          0     524056   0% /var/shm



INTERESTING FILES

/etc/protocols
In /etc, there is a file called protocols that lists all the protocols on the netbsd system including the RFC details and the correspondence address. On investing further reading the man page protocols(5), it appears that this is the protocol name database containing information on the known protocols in the DARPA internet (back in time). Using the getprotoent(),getprotobyname() and getprotobynumber() functions in the netbd.h library we can use these functions in our networking code.

/proc/meminfo
Contains global memory information for the system. A snapshot is shown below-
        total:    used:    free:  shared: buffers: cached:
Mem:  1019899904 94367744 925532160        0 45985792 64663552
Swap:        0        0        0
MemTotal:    995996 kB
MemFree:     903840 kB
MemShared:        0 kB
Buffers:      44908 kB
Cached:       63148 kB
SwapTotal:        0 kB
SwapFree:         0 kB


AFter reading further, memory allocation in UNIX is done by Slab allocation. The buddy algorithm was used but not anymore. (Ask professor to elaborate)
/sbin and /usr/sbin

by executing a diff+grep search between the 2 directories, I found that the following files are only in /usr/bin


As I was trying to read the files in this directory I kept getting a permission denied error, even though I was root. It appears that the /proc file system does not contain real files. They are rather virtual files that contain dynamic information about the kernel and the system.

READING- CHAPTER 1 (Stevens)

* The Linux kernel is used in the GNU Operating System
* the etc/passwd file stores the credentials for users on the system

SNAPSHOT OF NETBSD
root:*:0:0:Charlie &:/root:/bin/sh
toor:*:0:0:Bourne-again Superuser:/root:/bin/sh
daemon:*:1:1:The devil himself:/:/sbin/nologin
operator:*:2:5:System &:/usr/guest/operator:/sbin/nologin
bin:*:3:7:Binaries Commands and Source:/:/sbin/nologin
games:*:7:13:& pseudo-user:/usr/games:/sbin/nologin
postfix:*:12:12:& pseudo-user:/var/spool/postfix:/sbin/nologin
named:*:14:14:& pseudo-user:/var/chroot/named:/sbin/nologin
ntpd:*:15:15:& pseudo-user:/var/chroot/ntpd:/sbin/nologin
sshd:*:16:16:& pseudo-user:/var/chroot/sshd:/sbin/nologin
_pflogd:*:18:18:& pseudo-user:/var/chroot/pflogd:/sbin/nologin
_rwhod:*:19:19:& pseudo-user:/var/rwho:/sbin/nologin
_proxy:*:21:21:Proxy Services:/nonexistent:/sbin/nologin
_timedc:*:22:22:& pseudo-user:/nonexistent:/sbin/nologin
_sdpd:*:23:23:& pseudo-user:/nonexistent:/sbin/nologin
_httpd:*:24:24:& pseudo-user:/var/www:/sbin/nologin
_mdnsd:*:25:25:& pseudo-user:/nonexistent:/sbin/nologin
_tests:*:26:26:& pseudo-user:/nonexistent:/sbin/nologin
_tcpdump:*:27:27:& pseudo-user:/var/chroot/tcpdump:/sbin/nologin
_tss:*:28:28:& pseudo-user:/var/tpm:/sbin/nologin
_rtadvd:*:30:30:& pseudo-user:/var/chroot/rtadvd:/sbin/nologin
_unbound:*:32:32:& pseudo-user:/var/chroot/unbound:/sbin/nologin
_nsd:*:33:33:& pseudo-user:/var/chroot/nsd:/sbin/nologin
uucp:*:66:1:UNIX-to-UNIX Copy:/nonexistent:/sbin/nologin
nobody:*:32767:39:Unprivileged user:/nonexistent:/sbin/nologin
aubhikcr7:*:1000:100::/home/aubhikcr7:/bin/sh

* SHELLS
bourne shell - /bin/sh used on all systems



CHAPTER 3- FILE I/O

->Basic operations of file I/O are implemented using only 5 functions
1. Open
2. Read
3. Lseek
4. Write
5. Close

* Unbuffered I/O - Each function invokes a system call instead of being placed on a buffer, waiting for the right time to execute.
* File descriptors are used by the Kernel to reference files, which is just a non-negative integer.

OPEN returns FileDescriptor usedby READ, WRITE

STDIN=0, STDOUT=1, STDERR=2 **UNIX convention**

In /usr/include/unistd.h
===========================================================================
/*
 * IEEE Std 1003.1-90
 */
#define STDIN_FILENO    0       /* standard input file descriptor */
#define STDOUT_FILENO   1       /* standard output file descriptor */
#define STDERR_FILENO   2       /* standard error file descriptor */

==========================================================================

The maximum number of open files was initially 19 in UNIX systems, 63 in later versions. After checking fcntl.h in /usr/include, the F_MAXFD variable is 11. (Ask Professor)

==========================================================================

#define F_MAXFD         11              /* return the max open fd */

==========================================================================

FLAGS (OPTIONAL AND MANDATORY)

* The O_SYNC and O_DSYNC flags instruct the operation to wait for completion of physical I/O. There is a slight difference in these flags. In O_SYNC the file attributes are also updated synchronously whereas the O_DSYNC flags instructs the operation to not wait for file attributes to be updated if they don't affect the ability to read the written data

* Interestingly since the lowest unused number is used as the file descriptor, a program may occasionally reassign STDOUT (1) as a file descriptor


TOCTTOU- Time of check to time of use error
This error occurs when 2 file-based finction calls are made and the second call depends on the result of the first call. Because the 2 calls are not atomic, the second call may operate on the file before the first file has finished thus leading to an incorrect operation or worse, termination due to error.


 FILE FUNCTIONS

creat - deprecated. Was used earlier to create an empty file and return a file descriptor to the file with ONLY WRITE ACCESS!
==========================================================================
#include <fcntl.h>
int creat(const char *path, mode_t mode);
==========================================================================


It is equivalent to the open function
==========================================================================
#include<unistd.h>

open(path, O_RDWR | O_CREAT | O_TRUNC, mode);

/*Additionally creates and opens a file for reading and writing */
==========================================================================


CLOSE
==========================================================================
#include<unistd.h>
int close(int fd);
==========================================================================
If the program terminates, all open file descriptors are closed automatically. THis is OK for unbuffered operations as the OS will close all the open files but for a buffered operation, the data will still lie somewhere in memory.


LSEEK

Each file initially sets its currect-file-offset to 0 and increments it as the file is read.
For setting the offset manually, the LSEEK function is used-
==========================================================================
#include <unistd.h>
off_t lseek(int fd, off_t offset, int whence);
==========================================================================

whence can be-
1. SEEK_SET- offset set to offset bytes (2nd parameter) from the beginning of the file
2. SEEK_CUR- offset is set to currect_value+offset (-ve or +ve)
3. SEEK_END- offset is set to size of file + offset (-ve or +ve)

To test if a file has the ability to seek, we determine the current offset and if it returns a valid value (not an error ESPIPE or -1) it is seekable.

==========================================================================
#include "apue.h"
int
main(void)
{
if (lseek(STDIN_FILENO, 0, SEEK_CUR) == -1)
   printf("cannot seek\n");

else
   printf("seek OK\n");

exit(0);
}

==========================================================================

You can also create holes in a file using lseek by passing a higher offset than the file size. The holes will be read back as 0s.


READ COMMAND


==========================================================================
#include <unistd.h>
ssize_t read(int fd, void *buf, size_t nbytes);
==========================================================================

returns the number of bytes read or 0 if EOF or -1 if error

WRITE FUNCTION

==========================================================================
#include <unistd.h>
ssize_t write(int fd, const void *buf, size_t nbytes);
==========================================================================

Returns the number of bytes written, else -1 on error
